/**
 * ARTIK Cloud API
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package cloud.artik.api

import cloud.artik.model.Device
import cloud.artik.model.DeviceEnvelope
import cloud.artik.model.DeviceTokenEnvelope
import cloud.artik.model.PresenceEnvelope
import io.swagger.client.ApiInvoker
import io.swagger.client.ApiException

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date

import scala.collection.mutable.HashMap

class DevicesApi(val defBasePath: String = "https://api.artik.cloud/v1.1",
                        defApiInvoker: ApiInvoker = ApiInvoker) {
  var basePath = defBasePath
  var apiInvoker = defApiInvoker

  def addHeader(key: String, value: String) = apiInvoker.defaultHeaders += key -> value 

  /**
   * Add Device
   * Create a device
   * @param device Device to be added to the user 
   * @return DeviceEnvelope
   */
  def addDevice (device: Device) : Option[DeviceEnvelope] = {
    // create path and map variables
    val path = "/devices".replaceAll("\\{format\\}","json")
    val contentTypes = List("application/json", "application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (device == null) throw new Exception("Missing required parameter 'device' when calling DevicesApi->addDevice")

        
    
    var postBody: AnyRef = device

    if(contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart()
      
      postBody = mp
    }
    else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "POST", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[DeviceEnvelope]).asInstanceOf[DeviceEnvelope])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Delete Device
   * Deletes a device
   * @param deviceId deviceId 
   * @return DeviceEnvelope
   */
  def deleteDevice (deviceId: String) : Option[DeviceEnvelope] = {
    // create path and map variables
    val path = "/devices/{deviceId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deviceId" + "\\}",apiInvoker.escape(deviceId))


    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

        
    
    var postBody: AnyRef = null

    if(contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart()
      
      postBody = mp
    }
    else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "DELETE", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[DeviceEnvelope]).asInstanceOf[DeviceEnvelope])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Delete Device Token
   * Deletes a device&#39;s token
   * @param deviceId deviceId 
   * @return DeviceTokenEnvelope
   */
  def deleteDeviceToken (deviceId: String) : Option[DeviceTokenEnvelope] = {
    // create path and map variables
    val path = "/devices/{deviceId}/tokens".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deviceId" + "\\}",apiInvoker.escape(deviceId))


    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

        
    
    var postBody: AnyRef = null

    if(contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart()
      
      postBody = mp
    }
    else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "DELETE", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[DeviceTokenEnvelope]).asInstanceOf[DeviceTokenEnvelope])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Get Device
   * Retrieves a device
   * @param deviceId deviceId 
   * @return DeviceEnvelope
   */
  def getDevice (deviceId: String) : Option[DeviceEnvelope] = {
    // create path and map variables
    val path = "/devices/{deviceId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deviceId" + "\\}",apiInvoker.escape(deviceId))


    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

        
    
    var postBody: AnyRef = null

    if(contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart()
      
      postBody = mp
    }
    else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[DeviceEnvelope]).asInstanceOf[DeviceEnvelope])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Get device presence information
   * Return the presence status of the given device along with the time it was last seen
   * @param deviceId Device ID. 
   * @return PresenceEnvelope
   */
  def getDevicePresence (deviceId: String) : Option[PresenceEnvelope] = {
    // create path and map variables
    val path = "/devices/{deviceId}/presence".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deviceId" + "\\}",apiInvoker.escape(deviceId))


    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

        
    
    var postBody: AnyRef = null

    if(contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart()
      
      postBody = mp
    }
    else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[PresenceEnvelope]).asInstanceOf[PresenceEnvelope])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Get Device Token
   * Retrieves a device&#39;s token
   * @param deviceId deviceId 
   * @return DeviceTokenEnvelope
   */
  def getDeviceToken (deviceId: String) : Option[DeviceTokenEnvelope] = {
    // create path and map variables
    val path = "/devices/{deviceId}/tokens".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deviceId" + "\\}",apiInvoker.escape(deviceId))


    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

        
    
    var postBody: AnyRef = null

    if(contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart()
      
      postBody = mp
    }
    else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[DeviceTokenEnvelope]).asInstanceOf[DeviceTokenEnvelope])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Update Device
   * Updates a device
   * @param deviceId deviceId 
   * @param device Device to be updated 
   * @return DeviceEnvelope
   */
  def updateDevice (deviceId: String, device: Device) : Option[DeviceEnvelope] = {
    // create path and map variables
    val path = "/devices/{deviceId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deviceId" + "\\}",apiInvoker.escape(deviceId))


    val contentTypes = List("application/json", "application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (device == null) throw new Exception("Missing required parameter 'device' when calling DevicesApi->updateDevice")

        
    
    var postBody: AnyRef = device

    if(contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart()
      
      postBody = mp
    }
    else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "PUT", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[DeviceEnvelope]).asInstanceOf[DeviceEnvelope])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Update Device Token
   * Updates a device&#39;s token
   * @param deviceId deviceId 
   * @return DeviceTokenEnvelope
   */
  def updateDeviceToken (deviceId: String) : Option[DeviceTokenEnvelope] = {
    // create path and map variables
    val path = "/devices/{deviceId}/tokens".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deviceId" + "\\}",apiInvoker.escape(deviceId))


    val contentTypes = List("text/plain", "application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

        
    
    var postBody: AnyRef = null

    if(contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart()
      
      postBody = mp
    }
    else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "PUT", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[DeviceTokenEnvelope]).asInstanceOf[DeviceTokenEnvelope])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

}
